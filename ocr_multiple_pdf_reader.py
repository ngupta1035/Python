# -*- coding: utf-8 -*-
"""OCR multiple pdf reader.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HpVvkP2WRaZIiieBcoOmkwt3v7P_B1Ew
"""

# Install EasyOCR
!pip install easyocr

# Install PyMuPDF (fitz)
!pip install PyMuPDF

# Install Camelot (for table extraction from PDFs)
!pip install camelot-py[cv]

# Install Pillow (for image handling)
!pip install pillow

# Install numpy
!pip install numpy

from google.colab import drive
drive.mount('/content/drive')

import easyocr
import fitz  # PyMuPDF
import camelot
from PIL import Image
import io
import numpy as np
import concurrent.futures
import os

# Initialize EasyOCR reader
reader = easyocr.Reader(['en'])

# Function to extract text from a scanned PDF using OCR (with EasyOCR)
def extract_text_from_pdf(pdf_path):
    doc = fitz.open(pdf_path)
    full_text = ""

    for page_num in range(len(doc)):  # Iterate through pages
        page = doc.load_page(page_num)

        # Extract images from the page
        img_list = page.get_images(full=True)

        for img_index, img in enumerate(img_list):
            xref = img[0]  # Image reference
            base_image = doc.extract_image(xref)
            image_bytes = base_image["image"]
            image = Image.open(io.BytesIO(image_bytes))

            # Save the extracted image to a folder (optional)
            image_name = f"extracted_image_{os.path.basename(pdf_path)}_page_{page_num + 1}_img_{img_index + 1}.png"
            image.save(image_name)

            # Convert PIL image to NumPy array for EasyOCR
            image_np = np.array(image)

            # Apply OCR to the image using EasyOCR
            ocr_result = reader.readtext(image_np)
            text = "\n".join([item[1] for item in ocr_result])  # Extract only the text part from OCR result
            full_text += f"--- OCR Text from Image on page {page_num + 1} ---\n{text}\n"

        # Extract text from the PDF page (text-based, not image)
        page_text = page.get_text("text")
        if page_text.strip():
            full_text += f"--- Text from page {page_num + 1} ---\n{page_text}\n"

    return full_text

# Function to extract tables from PDF using Camelot
def extract_tables_from_pdf(pdf_path):
    tables = camelot.read_pdf(pdf_path, pages='all', flavor='lattice')  # Use 'lattice' if your tables have clear grid lines
    all_tables = []

    for i, table in enumerate(tables):
        table_data = table.df.values.tolist()  # Convert the table to a list of lists
        all_tables.append(table_data)

    return all_tables

# Function to process multiple PDFs concurrently
def process_pdfs(pdf_paths):
    with concurrent.futures.ThreadPoolExecutor() as executor:
        # Submit all PDF files for processing
        futures = [executor.submit(process_pdf, pdf_path) for pdf_path in pdf_paths]

        # Retrieve the results as they complete
        for future in concurrent.futures.as_completed(futures):
            pdf_path, text, tables, graph_images = future.result()
            print(f"Results for {pdf_path}:\n")
            print("Extracted Text:\n", text)
            for idx, table in enumerate(tables):
                print(f"\n--- Table {idx + 1} ---")
                for row in table:
                    print(row)
            # Display or process graph images (if any)
            for graph_image in graph_images:
                print(f"Graph image saved: {graph_image}")

# Function to process a single PDF
def process_pdf(pdf_path):
    # Extract text (OCR from images and text from scanned PDF)
    text = extract_text_from_pdf(pdf_path)

    # Extract tables
    tables = extract_tables_from_pdf(pdf_path)

    # Extract graphs (images)
    graph_images = extract_graphs_from_pdf(pdf_path)

    return pdf_path, text, tables, graph_images

# Function to extract graphs (images) from PDF
def extract_graphs_from_pdf(pdf_path):
    doc = fitz.open(pdf_path)
    graph_images = []

    for page_num in range(len(doc)):  # Iterate through pages
        page = doc.load_page(page_num)

        # Extract images from the page
        img_list = page.get_images(full=True)

        for img_index, img in enumerate(img_list):
            xref = img[0]  # Image reference
            base_image = doc.extract_image(xref)
            image_bytes = base_image["image"]
            image = Image.open(io.BytesIO(image_bytes))

            # Save the extracted image (graph or chart) to a folder
            image_name = f"graph_image_{os.path.basename(pdf_path)}_page_{page_num + 1}_img_{img_index + 1}.png"
            image.save(image_name)
            graph_images.append(image_name)

    return graph_images

# Example Usage:
pdf_paths = ["/content/PublicWaterMassMailing.pdf"]  # List of PDFs to process

# Process PDFs concurrently
process_pdfs(pdf_paths)